{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ouroboros or-uh-bore-us Extract ROIs from cloud-hosted medical scans. Ouroboros is a desktop app (built with Electron) and a Python package (with a CLI). The desktop app comes with a pre-compiled Python server (from the Python package). It runs the server in the background to handle all processing and calculations. If you are interested in using the Python package for its CLI or for a custom usecase, check out the python folder in the main repository. Ouroboros also supports a plugin system. A plugin usage guide is forthcoming. Usage Guide It is recommended that you read these pages in order. Download and Install Ouroboros Slicing Backprojection Ouroboros Explanation A user of Ouroboros may have a multi-terabyte volumetric scan, hosted with the Neuroglancer family of tools (i.e. cloud-volume ). Perhaps there is a long, relatively sparse structure (ROI), like a nerve or a blood vessel that crosses the entire scan. Even with a well-equipped computer, it would be difficult to segment the entire stucture in one pass due to RAM limitations. Ouroboros provides a solution. A user first traces the structure in Neuroglancer with sequential annotation points, and then saves the JSON configuration to a file. Ouroboros opens this configuration file and cuts rectangular slices along the annotation path, producing a straightened volume with the ROI at the center of each slice (usually much smaller than the original scan). Every tenth slice in a circular annotation path, rendered in Ouroboros's Slicing Page. From there, the user segments the much smaller straightened volume with their choice of segmentation system. Then, Ouroboros backprojects the segmented slices into the original volume space (unstraightens it), producing a full segmentation.","title":"Home"},{"location":"#ouroboros","text":"or-uh-bore-us Extract ROIs from cloud-hosted medical scans. Ouroboros is a desktop app (built with Electron) and a Python package (with a CLI). The desktop app comes with a pre-compiled Python server (from the Python package). It runs the server in the background to handle all processing and calculations. If you are interested in using the Python package for its CLI or for a custom usecase, check out the python folder in the main repository. Ouroboros also supports a plugin system. A plugin usage guide is forthcoming.","title":"Ouroboros"},{"location":"#usage-guide","text":"It is recommended that you read these pages in order. Download and Install Ouroboros Slicing Backprojection","title":"Usage Guide"},{"location":"#ouroboros-explanation","text":"A user of Ouroboros may have a multi-terabyte volumetric scan, hosted with the Neuroglancer family of tools (i.e. cloud-volume ). Perhaps there is a long, relatively sparse structure (ROI), like a nerve or a blood vessel that crosses the entire scan. Even with a well-equipped computer, it would be difficult to segment the entire stucture in one pass due to RAM limitations. Ouroboros provides a solution. A user first traces the structure in Neuroglancer with sequential annotation points, and then saves the JSON configuration to a file. Ouroboros opens this configuration file and cuts rectangular slices along the annotation path, producing a straightened volume with the ROI at the center of each slice (usually much smaller than the original scan). Every tenth slice in a circular annotation path, rendered in Ouroboros's Slicing Page. From there, the user segments the much smaller straightened volume with their choice of segmentation system. Then, Ouroboros backprojects the segmented slices into the original volume space (unstraightens it), producing a full segmentation.","title":"Ouroboros Explanation"},{"location":"guide/backproject/","text":"Backprojection After straightened volume produced by the slicing step is segmented, Ouroboros's Backproject Page can be used to project the segmentation back into the coordinate space of the original volume. Using the Backproject Page Basic Usage Demo Reusing Options from a Previous Run See the same section under Slice Page . How Does Backprojection Work? A large amount of helpful data is saved in *-configuration.json file after the slicing process. This data contains all of the rectangle corners from slicing, and the bounding boxes the slices are associated with. With this data, Ouroboros recalculates the 2D coordinate grids of 3D points for each slice. Trilinear Interpolation The straightened volume slices are loaded in as a memmap (an in-memory reference to the tiff image on the hard-drive or SSD). Then, an empty volume is created with the same dimensions as the bounding box. A custom trilinear interpolation implementation is used to copy the slice data into the empty volume. These volumes are saved to local tiff images. After all volumes have been calculated, Ouroboros creates chunks of an empty volume (same size as the original volume) and copies the data from the smaller volumes into the chunk, and then saves that chunk as a tiff with compression. Finally, all chunks are combined to produce either a minimum bounding box in the space of the original volume with all of the backprojected data, or a full-size volume with the backprojected data. Why Is Interpolation Needed? The slices in the straightened volume were originally produced through interpolation. Each slice has a 2D grid of 3D points, and the values at these points were approximated through interpolation. In order to put the data back, we have to interpolate in the opposite direction. Each point contributes to the value of its neighbors based on how close it is to them.","title":"Backprojection"},{"location":"guide/backproject/#backprojection","text":"After straightened volume produced by the slicing step is segmented, Ouroboros's Backproject Page can be used to project the segmentation back into the coordinate space of the original volume.","title":"Backprojection"},{"location":"guide/backproject/#using-the-backproject-page","text":"Basic Usage Demo Reusing Options from a Previous Run See the same section under Slice Page .","title":"Using the Backproject Page"},{"location":"guide/backproject/#how-does-backprojection-work","text":"A large amount of helpful data is saved in *-configuration.json file after the slicing process. This data contains all of the rectangle corners from slicing, and the bounding boxes the slices are associated with. With this data, Ouroboros recalculates the 2D coordinate grids of 3D points for each slice. Trilinear Interpolation The straightened volume slices are loaded in as a memmap (an in-memory reference to the tiff image on the hard-drive or SSD). Then, an empty volume is created with the same dimensions as the bounding box. A custom trilinear interpolation implementation is used to copy the slice data into the empty volume. These volumes are saved to local tiff images. After all volumes have been calculated, Ouroboros creates chunks of an empty volume (same size as the original volume) and copies the data from the smaller volumes into the chunk, and then saves that chunk as a tiff with compression. Finally, all chunks are combined to produce either a minimum bounding box in the space of the original volume with all of the backprojected data, or a full-size volume with the backprojected data. Why Is Interpolation Needed? The slices in the straightened volume were originally produced through interpolation. Each slice has a 2D grid of 3D points, and the values at these points were approximated through interpolation. In order to put the data back, we have to interpolate in the opposite direction. Each point contributes to the value of its neighbors based on how close it is to them.","title":"How Does Backprojection Work?"},{"location":"guide/downloading/","text":"Download Ouroboros There are prebuilt applications available in Releases . Windows: *-setup.exe Mac: *.dmg Linux: Multiple options available When you open the app, the GUI will open immediately, but the local server that runs the processing could take up to 15 seconds to start . There is an indicator in the GUI that shows if the server is connected. Currently, none of the apps are notarized. For Mac, if an error occurs when you try to run the app, find the app installation (should be called ouroboros.app ) and run xattr -d com.apple.quarantine ouroboros.app .","title":"Download Ouroboros"},{"location":"guide/downloading/#download-ouroboros","text":"There are prebuilt applications available in Releases . Windows: *-setup.exe Mac: *.dmg Linux: Multiple options available When you open the app, the GUI will open immediately, but the local server that runs the processing could take up to 15 seconds to start . There is an indicator in the GUI that shows if the server is connected. Currently, none of the apps are notarized. For Mac, if an error occurs when you try to run the app, find the app installation (should be called ouroboros.app ) and run xattr -d com.apple.quarantine ouroboros.app .","title":"Download Ouroboros"},{"location":"guide/slicing/","text":"Slicing Slicing is one of the primary features of Ouroboros, available in the CLI and the desktop app. Using the Slice Page Basic Usage Demo Reusing Options from a Previous Run How Does Slicing Work? Spline Fitting Ouroboros fits a spline curve to the annotation path from the Neuroglancer JSON file. This produces a smooth, differentiable curve along the length of the annotations. If the line segments between annotation points were used, then there would could be highly discontinuous slice transitions around sharp corners. Slice Coordinate Frames Ouroboros calculates equidistant points along the spline curve. Each point is \"1\" apart from the previous to match the appearance of isotropic slices taken from one of the axes of the coordinate space of the full volume (the coordinate space of the annotation points). To follow any possible path, each point must have its own coordinate frame normal to the spline. For easier segmentation, it is also important that the axes of the point coordinate frames don't flip between points. To achieve this, Ouroboros calculates rotation-minimizing frames based on the change in orientation of the tangent vectors of adjacent points. Rectangles and Grids Ouroboros calculates the corners of the slice rectangle at using each point and its associated coordinate axes (as vectors). Pseudocode width_vector # 'u' unit vector scaled to slice width / 2 height_vector # 'v' unit vector scaled to slice height / 2 top_left = point - width_vector + height_vector top_right = point + width_vector + height_vector bottom_right = point + width_vector - height_vector bottom_left = point - width_vector - height_vector Then, for each point, a 2D grid is generated with given dimensions (slice width and height). Each point in the 2D grid is a 3D point which is calculated by interpolating between the four corner points. Volumes and Trilinear Interpolation At this point, Ouroboros has a full grid of 3D points associated with each slice, but has yet to download any data from the cloud-hosted volume. To avoid downloading unnecessary data, Ouroboros employs binary space partitioning to divide the minimum bounding box of the ROI recursively until each volume contains few enough slices to fit into available RAM. Ouroboros then downloads the data for each of these bounding boxes from the cloud-hosted volume. As each download completes, a new process is spawned to handle calculations. For each volume, scipy.ndimage.map_coordinates is used to extract the values at the coordinates of the slice grids from the 3D volume using trilinear interpolation. Each of these slices are saved as local tiff images and are later combined into a single output tiff.","title":"Slicing"},{"location":"guide/slicing/#slicing","text":"Slicing is one of the primary features of Ouroboros, available in the CLI and the desktop app.","title":"Slicing"},{"location":"guide/slicing/#using-the-slice-page","text":"Basic Usage Demo Reusing Options from a Previous Run","title":"Using the Slice Page"},{"location":"guide/slicing/#how-does-slicing-work","text":"Spline Fitting Ouroboros fits a spline curve to the annotation path from the Neuroglancer JSON file. This produces a smooth, differentiable curve along the length of the annotations. If the line segments between annotation points were used, then there would could be highly discontinuous slice transitions around sharp corners. Slice Coordinate Frames Ouroboros calculates equidistant points along the spline curve. Each point is \"1\" apart from the previous to match the appearance of isotropic slices taken from one of the axes of the coordinate space of the full volume (the coordinate space of the annotation points). To follow any possible path, each point must have its own coordinate frame normal to the spline. For easier segmentation, it is also important that the axes of the point coordinate frames don't flip between points. To achieve this, Ouroboros calculates rotation-minimizing frames based on the change in orientation of the tangent vectors of adjacent points. Rectangles and Grids Ouroboros calculates the corners of the slice rectangle at using each point and its associated coordinate axes (as vectors). Pseudocode width_vector # 'u' unit vector scaled to slice width / 2 height_vector # 'v' unit vector scaled to slice height / 2 top_left = point - width_vector + height_vector top_right = point + width_vector + height_vector bottom_right = point + width_vector - height_vector bottom_left = point - width_vector - height_vector Then, for each point, a 2D grid is generated with given dimensions (slice width and height). Each point in the 2D grid is a 3D point which is calculated by interpolating between the four corner points. Volumes and Trilinear Interpolation At this point, Ouroboros has a full grid of 3D points associated with each slice, but has yet to download any data from the cloud-hosted volume. To avoid downloading unnecessary data, Ouroboros employs binary space partitioning to divide the minimum bounding box of the ROI recursively until each volume contains few enough slices to fit into available RAM. Ouroboros then downloads the data for each of these bounding boxes from the cloud-hosted volume. As each download completes, a new process is spawned to handle calculations. For each volume, scipy.ndimage.map_coordinates is used to extract the values at the coordinates of the slice grids from the 3D volume using trilinear interpolation. Each of these slices are saved as local tiff images and are later combined into a single output tiff.","title":"How Does Slicing Work?"}]}